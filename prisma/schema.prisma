generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String           @id @default(uuid()) @db.Uuid
  email      String           @unique
  password   String           @db.VarChar(255)
  name       String           @db.VarChar(255)
  created_at DateTime         @default(now()) @db.Timestamptz(2)
  updated_at DateTime         @updatedAt @db.Timestamptz(2)
  role       Role?
  classes    TeacherClass[]
  subjects   TeacherSubject[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String
  user_id     String   @unique @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(2)
  updated_at  DateTime @updatedAt @db.Timestamptz(2)
  users       User     @relation(fields: [user_id], references: [id])

  @@map("roles")
}

model TeacherClass {
  id         String   @id @default(uuid()) @db.Uuid
  teacher_id String   @db.Uuid
  class_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(2)
  updated_at DateTime @updatedAt @db.Timestamptz(2)
  class      Class    @relation(fields: [class_id], references: [id])
  teacher    User     @relation(fields: [teacher_id], references: [id])

  @@map("teacher_classes")
}

model Class {
  id         String         @id @default(uuid()) @db.Uuid
  name       String         @db.VarChar(255)
  created_at DateTime       @default(now()) @db.Timestamptz(2)
  updated_at DateTime       @updatedAt @db.Timestamptz(2)
  student    Student[]
  teacher    TeacherClass[]

  @@map("classes")
}

model TeacherSubject {
  id         String   @id @default(uuid()) @db.Uuid
  teacher_id String   @db.Uuid
  subject_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(2)
  updated_at DateTime @updatedAt @db.Timestamptz(2)
  subject    Subject  @relation(fields: [subject_id], references: [id])
  teacher    User     @relation(fields: [teacher_id], references: [id])

  @@map("teacher_subjects")
}

model Subject {
  id         String           @id @default(uuid()) @db.Uuid
  name       String           @db.VarChar(255)
  created_at DateTime         @default(now()) @db.Timestamptz(2)
  updated_at DateTime         @updatedAt @db.Timestamptz(2)
  abcences   Absence[]
  student    Grade[]
  teacher    TeacherSubject[]

  @@map("subjects")
}

model Student {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar(255)
  registration String    @unique @db.VarChar(50)
  class_id     String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamptz(2)
  updated_at   DateTime  @updatedAt @db.Timestamptz(2)
  abcences     Absence[]
  grades       Grade[]
  class        Class     @relation(fields: [class_id], references: [id])

  @@map("students")
}

model Grade {
  id          String   @id @default(uuid()) @db.Uuid
  student_id  String   @db.Uuid
  subject_id  String   @db.Uuid
  description String
  grade       Float
  created_at  DateTime @default(now()) @db.Timestamptz(2)
  updated_at  DateTime @updatedAt @db.Timestamptz(2)
  student     Student  @relation(fields: [student_id], references: [id])
  subject     Subject  @relation(fields: [subject_id], references: [id])

  @@map("grades")
}

model Absence {
  id         String   @id @default(uuid()) @db.Uuid
  student_id String   @db.Uuid
  subject_id String   @db.Uuid
  date       DateTime @db.Timestamptz(2)
  created_at DateTime @default(now()) @db.Timestamptz(2)
  updated_at DateTime @updatedAt @db.Timestamptz(2)
  student    Student  @relation(fields: [student_id], references: [id])
  subject    Subject  @relation(fields: [subject_id], references: [id])

  @@map("abcences")
}
